/**
 * Pizza Shop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CartCheckoutResponse from '../model/CartCheckoutResponse';
import CheckCartRequest from '../model/CheckCartRequest';
import CheckCartResponse from '../model/CheckCartResponse';
import CheckoutRequest from '../model/CheckoutRequest';

/**
* Cart service.
* @module api/CartApi
* @version 1.0
*/
export default class CartApi {

    /**
    * Constructs a new CartApi. 
    * @alias module:api/CartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/CheckCartRequest} CheckCartRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckCartResponse} and HTTP response
     */
    checkWithHttpInfo(CheckCartRequest) {
      let postBody = CheckCartRequest;
      // verify the required parameter 'CheckCartRequest' is set
      if (CheckCartRequest === undefined || CheckCartRequest === null) {
        throw new Error("Missing the required parameter 'CheckCartRequest' when calling check");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckCartResponse;
      return this.apiClient.callApi(
        '/v1/cart/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CheckCartRequest} CheckCartRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckCartResponse}
     */
    check(CheckCartRequest) {
      return this.checkWithHttpInfo(CheckCartRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CheckoutRequest} CheckoutRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartCheckoutResponse} and HTTP response
     */
    checkoutWithHttpInfo(CheckoutRequest) {
      let postBody = CheckoutRequest;
      // verify the required parameter 'CheckoutRequest' is set
      if (CheckoutRequest === undefined || CheckoutRequest === null) {
        throw new Error("Missing the required parameter 'CheckoutRequest' when calling checkout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartCheckoutResponse;
      return this.apiClient.callApi(
        '/v1/cart/checkout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CheckoutRequest} CheckoutRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartCheckoutResponse}
     */
    checkout(CheckoutRequest) {
      return this.checkoutWithHttpInfo(CheckoutRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
